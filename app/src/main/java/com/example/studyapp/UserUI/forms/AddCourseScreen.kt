package com.example.studyapp.UserUI.forms

import android.widget.Toast
import androidx.compose.foundation.Image

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.LiveData
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.studyapp.Data.database.Course
import com.example.studyapp.Data.database.CourseDAO
import com.example.studyapp.Data.database.CourseRepository
import com.example.studyapp.R
import com.example.studyapp.viewModel.CourseViewModel
import kotlinx.coroutines.flow.Flow

@Composable
fun AddCourseHeading() {
    Text(
        text = "NEW COURSE",
        fontSize = 45.sp,
        fontWeight = FontWeight.Bold,
        modifier = Modifier.fillMaxWidth().padding(top = 16.dp),
        textAlign = TextAlign.Center,
        color = Color(0xFF428042)
    )
}

@Composable
fun CourseNameField(courseName: MutableState<String>) {
    TextField(
        value = courseName.value,
        onValueChange = { courseName.value = it },
        label = { Text("Course Name", fontSize = 18.sp) },
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 24.dp)
            .clip(RoundedCornerShape(8.dp)),
        shape = RoundedCornerShape(8.dp)
    )
}

@Composable
fun NoofUnitsField(noOfUnits: MutableState<String>) {
    TextField(
        value = noOfUnits.value,
        onValueChange = { noOfUnits.value = it },
        label = { Text("Number Of Units:", fontSize = 18.sp) },
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 24.dp)
            .clip(RoundedCornerShape(8.dp)),
        shape = RoundedCornerShape(8.dp)
    )
}

@Composable
fun AddCourseButton(onClick: () -> Unit) {
    Button(
        onClick = onClick,
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 16.dp)
            .height(50.dp),
        colors = ButtonDefaults.buttonColors(Color(0xFF428042))
    ) {
        Text("ADD COURSE", fontSize = 16.sp, fontWeight = FontWeight.Bold)
    }
}

@Composable
fun AddCourseScreen(navController: NavController, viewModel: CourseViewModel) {
    val courseName = remember { mutableStateOf("") }
    val noOfUnits = remember { mutableStateOf("") }
    val context = LocalContext.current
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        Image(
            painter = painterResource(id = R.drawable.background),
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            AddCourseHeading()

            CourseNameField(courseName)
            NoofUnitsField(noOfUnits)

            AddCourseButton {
                if (courseName.value.isNotBlank() && noOfUnits.value.isNotBlank()) {
                    val numberOfUnits = noOfUnits.value.toIntOrNull()
                    if (numberOfUnits != null) {
                        val newCourse = Course(
                            courseID = 0, // Assuming this is auto-generated by Room
                            courseName = courseName.value,
                            noOfTopics = numberOfUnits,
                            maximumXp = 100 // Or whatever logic you want for XP
                        )

                        // Call addCourse from the ViewModel
                        viewModel.addCourse(newCourse) { isSuccess ->
                            if (isSuccess) {
                                Toast.makeText(
                                    context,
                                    "Course added",
                                    Toast.LENGTH_SHORT
                                ).show()
                                navController.popBackStack()
                            } else {
                                Toast.makeText(
                                    context,
                                    "Error!Course Not added",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        }
                    } else {
                        Toast.makeText(context, "Number of topics must be a valid number", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(context, "All fields must be filled", Toast.LENGTH_SHORT).show()
                }
            }


            Button(
                onClick = { navController.popBackStack() },
                modifier = Modifier.padding(top = 16.dp)
            ) {
                Text("Back", fontSize = 16.sp, fontWeight = FontWeight.Bold)
            }
        }
    }
}


@Preview(showBackground = true)
@Composable
fun PreviewAddCourseScreen() {
    val courseName = remember { mutableStateOf("") }
    val noOfUnits = remember { mutableStateOf("") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        Image(
            painter = painterResource(id = R.drawable.background),
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            AddCourseHeading()
            CourseNameField(courseName)
            NoofUnitsField(noOfUnits)
            AddCourseButton {

            }
        }
    }

        val mockCourseDAO = object : CourseDAO {
            override suspend fun insert(course: Course) {
                TODO("Not yet implemented")
            }

            override suspend fun update(course: Course) {
                TODO("Not yet implemented")
            }

            override fun getCourseDetails(courseName: String): Flow<Course?> {
                TODO("Not yet implemented")
            }

            override fun getAllCourses(): LiveData<List<Course>> {
                TODO("Not yet implemented")
            }


        }
    val mockCourseRepository = CourseRepository(mockCourseDAO)


    val mockViewModel = CourseViewModel(mockCourseRepository)

    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = "AddCourseScreen") {
        composable("addCourseScreen") {
            // Pass navController to the SignupScreen
            AddCourseScreen(viewModel = mockViewModel, navController = navController)
        }

    }
    }

